{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPaperId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPaperId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contributionIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        }
      ],
      "name": "ContributionApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paperId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contributionIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "changesHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        }
      ],
      "name": "ContributionSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paperId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feePaid",
          "type": "uint256"
        }
      ],
      "name": "PaperAccessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPaperId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newContentHash",
          "type": "string"
        }
      ],
      "name": "PaperUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paperId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "contentHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accessFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "keywords",
          "type": "string[]"
        }
      ],
      "name": "PaperUploaded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "paperId",
          "type": "uint256"
        }
      ],
      "name": "accessPaper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "paperId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "contributionIndex",
          "type": "uint256"
        }
      ],
      "name": "approveContribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "contributions",
      "outputs": [
        {
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "changesHash",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "paperId",
          "type": "uint256"
        }
      ],
      "name": "getContributions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "contributor",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "changesHash",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "stakeAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct MedicalResearch.Contribution[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "paperId",
          "type": "uint256"
        }
      ],
      "name": "getOriginalPaper",
      "outputs": [
        {
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "contentHash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "accessFee",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "keywords",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "paperId",
          "type": "uint256"
        }
      ],
      "name": "getPaperById",
      "outputs": [
        {
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "contentHash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "accessFee",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "keywords",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPapers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "author",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "contentHash",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "accessFee",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "keywords",
              "type": "string[]"
            },
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "parentPaperId",
              "type": "uint256"
            }
          ],
          "internalType": "struct MedicalResearch.Paper[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getPapersAccessedByUser",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "author",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "contentHash",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "accessFee",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "keywords",
              "type": "string[]"
            },
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "parentPaperId",
              "type": "uint256"
            }
          ],
          "internalType": "struct MedicalResearch.Paper[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getPapersByOwnerAddress",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "author",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "contentHash",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "accessFee",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "keywords",
              "type": "string[]"
            },
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "parentPaperId",
              "type": "uint256"
            }
          ],
          "internalType": "struct MedicalResearch.Paper[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserContributionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "paperAccessFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "paperAccessed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "papers",
      "outputs": [
        {
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "contentHash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "accessFee",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "parentPaperId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "paperId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "changesHash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        }
      ],
      "name": "submitContribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "contentHash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "accessFee",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "keywords",
          "type": "string[]"
        }
      ],
      "name": "uploadPaper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userContributionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xea3b5ba54808ada986564ed1215fe9327535dd68c2dde62c35ca9ff3cfbd7ff3",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "3764998",
    "logsBloom": "0x
    "blockHash": "0xb6f9ed2e6e90b9ef25b8b8399b00e35a66f7edf745cd692dcfbeacbcafc799d8",
    "transactionHash": "0xea3b5ba54808ada986564ed1215fe9327535dd68c2dde62c35ca9ff3cfbd7ff3",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "3764998",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "e747fb09d158acab4bb32f847a8b993a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPaperId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPaperId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contributionIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"ContributionApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paperId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contributionIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"changesHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"ContributionSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paperId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePaid\",\"type\":\"uint256\"}],\"name\":\"PaperAccessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPaperId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newContentHash\",\"type\":\"string\"}],\"name\":\"PaperUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paperId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contentHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accessFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"keywords\",\"type\":\"string[]\"}],\"name\":\"PaperUploaded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paperId\",\"type\":\"uint256\"}],\"name\":\"accessPaper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paperId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionIndex\",\"type\":\"uint256\"}],\"name\":\"approveContribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contributions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"changesHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paperId\",\"type\":\"uint256\"}],\"name\":\"getContributions\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"changesHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct MedicalResearch.Contribution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paperId\",\"type\":\"uint256\"}],\"name\":\"getOriginalPaper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contentHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"accessFee\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"keywords\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paperId\",\"type\":\"uint256\"}],\"name\":\"getPaperById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contentHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"accessFee\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"keywords\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPapers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contentHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"accessFee\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"keywords\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"parentPaperId\",\"type\":\"uint256\"}],\"internalType\":\"struct MedicalResearch.Paper[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPapersAccessedByUser\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contentHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"accessFee\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"keywords\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"parentPaperId\",\"type\":\"uint256\"}],\"internalType\":\"struct MedicalResearch.Paper[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getPapersByOwnerAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contentHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"accessFee\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"keywords\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"parentPaperId\",\"type\":\"uint256\"}],\"internalType\":\"struct MedicalResearch.Paper[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserContributionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paperAccessFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"paperAccessed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"papers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contentHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"accessFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"parentPaperId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paperId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"changesHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"submitContribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contentHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"accessFee\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"keywords\",\"type\":\"string[]\"}],\"name\":\"uploadPaper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userContributionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MedicalResearch.sol\":\"MedicalResearch\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/MedicalResearch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\n// import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract MedicalResearch {\\r\\n    // ERC20 token used for payments and staking\\r\\n    ERC20 public token;\\r\\n\\r\\n    // Struct to represent a research paper\\r\\n    struct Paper {\\r\\n        address author; // Address of the paper's author\\r\\n        string title; // Title of the paper\\r\\n        string contentHash; // Hash of the content to ensure integrity\\r\\n        uint256 accessFee; // Fee in tokens to access the paper\\r\\n        string[] keywords; // Array of keywords related to the paper\\r\\n        bool exists; // Flag to indicate if the paper exists\\r\\n        uint256 parentPaperId; // ID of the original paper (0 if original)\\r\\n    }\\r\\n\\r\\n    // Struct to represent a contribution to a paper\\r\\n    struct Contribution {\\r\\n        address contributor; // Address of the contributor\\r\\n        string changesHash; // Hash of the changes made\\r\\n        bool approved; // Flag to indicate if the contribution is approved\\r\\n        uint256 stakeAmount; // Amount of tokens staked for the contribution\\r\\n    }\\r\\n\\r\\n    uint256 private nextPaperId; // Counter for generating new paper IDs\\r\\n    uint256 private nextContributionIndex; // Counter for generating new contribution indices\\r\\n\\r\\n    // Mappings to store papers, contributions, access fees, and other data\\r\\n    mapping(uint256 => Paper) public papers; // Mapping from paper ID to Paper struct\\r\\n    mapping(uint256 => Contribution[]) public contributions; // Mapping from paper ID to an array of Contribution structs\\r\\n    mapping(uint256 => uint256) public paperAccessFees; // Mapping from paper ID to total access fees earned\\r\\n    mapping(address => uint256[]) private papersByOwner; // Mapping from owner address to an array of paper IDs owned\\r\\n    mapping(uint256 => mapping(address => bool)) public paperAccessed; // Mapping from paper ID to a mapping of user addresses to access status\\r\\n    mapping(address => uint256) public userContributionCount; // Mapping from user address to number of contributions made\\r\\n\\r\\n    // Events to log actions in the contract\\r\\n    event PaperUploaded(\\r\\n        uint256 paperId,\\r\\n        address indexed author,\\r\\n        string title,\\r\\n        string contentHash,\\r\\n        uint256 accessFee,\\r\\n        string[] keywords\\r\\n    );\\r\\n    event ContributionSubmitted(\\r\\n        uint256 paperId,\\r\\n        uint256 contributionIndex,\\r\\n        address indexed contributor,\\r\\n        string changesHash,\\r\\n        uint256 stakeAmount\\r\\n    );\\r\\n    event ContributionApproved(\\r\\n        uint256 oldPaperId,\\r\\n        uint256 newPaperId,\\r\\n        uint256 contributionIndex,\\r\\n        address indexed contributor,\\r\\n        uint256 rewardAmount\\r\\n    );\\r\\n    event PaperAccessed(uint256 paperId, address indexed user, uint256 feePaid);\\r\\n    event PaperUpdated(uint256 newPaperId, string newContentHash); // Event for new paper update\\r\\n\\r\\n    // Constructor to initialize the contract with the token address\\r\\n    constructor(address _tokenAddress) {\\r\\n        token = ERC20(_tokenAddress);\\r\\n        nextPaperId = 1; // Start paper IDs from 1\\r\\n        nextContributionIndex = 0; // Start contribution indices from 0\\r\\n    }\\r\\n\\r\\n    // Function to upload a new paper\\r\\n    function uploadPaper(\\r\\n        string memory title,\\r\\n        string memory contentHash,\\r\\n        uint256 accessFee,\\r\\n        string[] memory keywords\\r\\n    ) external {\\r\\n        uint256 paperId = nextPaperId;\\r\\n        nextPaperId++; // Increment the paper ID counter\\r\\n\\r\\n        papers[paperId] = Paper({\\r\\n            author: msg.sender,\\r\\n            title: title,\\r\\n            contentHash: contentHash,\\r\\n            accessFee: accessFee,\\r\\n            keywords: keywords,\\r\\n            exists: true,\\r\\n            parentPaperId: 0 // No parent for original papers\\r\\n        });\\r\\n\\r\\n        papersByOwner[msg.sender].push(paperId); // Add the paper ID to the list of papers owned by the author\\r\\n\\r\\n        emit PaperUploaded(\\r\\n            paperId,\\r\\n            msg.sender,\\r\\n            title,\\r\\n            contentHash,\\r\\n            accessFee,\\r\\n            keywords\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Function to access a paper by paying the access fee\\r\\n    function accessPaper(uint256 paperId) external {\\r\\n        require(papers[paperId].exists, \\\"Paper does not exist\\\");\\r\\n        require(\\r\\n            !paperAccessed[paperId][msg.sender],\\r\\n            \\\"User already has access to this paper\\\"\\r\\n        );\\r\\n\\r\\n        if (papers[paperId].accessFee > 0) {\\r\\n            require(\\r\\n                token.transferFrom(\\r\\n                    msg.sender,\\r\\n                    papers[paperId].author,\\r\\n                    papers[paperId].accessFee\\r\\n                ),\\r\\n                \\\"Token transfer failed\\\"\\r\\n            );\\r\\n            paperAccessFees[paperId] =\\r\\n                paperAccessFees[paperId] +\\r\\n                papers[paperId].accessFee; // Add the fee to the total access fees\\r\\n        }\\r\\n\\r\\n        paperAccessed[paperId][msg.sender] = true; // Mark the paper as accessed by the user\\r\\n\\r\\n        emit PaperAccessed(paperId, msg.sender, papers[paperId].accessFee);\\r\\n    }\\r\\n\\r\\n    // Function to submit a contribution to a paper\\r\\n    function submitContribution(\\r\\n        uint256 paperId,\\r\\n        string memory changesHash,\\r\\n        uint256 stakeAmount\\r\\n    ) external {\\r\\n        require(papers[paperId].exists, \\\"Paper does not exist\\\");\\r\\n        require(\\r\\n            token.transferFrom(msg.sender, address(this), stakeAmount),\\r\\n            \\\"Token transfer failed\\\"\\r\\n        );\\r\\n\\r\\n        uint256 contributionIndex = contributions[paperId].length; // Get the index for the new contribution\\r\\n\\r\\n        contributions[paperId].push(\\r\\n            Contribution({\\r\\n                contributor: msg.sender,\\r\\n                changesHash: changesHash,\\r\\n                approved: false,\\r\\n                stakeAmount: stakeAmount\\r\\n            })\\r\\n        );\\r\\n\\r\\n        userContributionCount[msg.sender]++; // Increment the contribution count for the user\\r\\n\\r\\n        emit ContributionSubmitted(\\r\\n            paperId,\\r\\n            contributionIndex,\\r\\n            msg.sender,\\r\\n            changesHash,\\r\\n            stakeAmount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Function to approve a contribution to a paper\\r\\n    function approveContribution(\\r\\n        uint256 paperId,\\r\\n        uint256 contributionIndex\\r\\n    ) external {\\r\\n        require(papers[paperId].exists, \\\"Paper does not exist\\\");\\r\\n        require(\\r\\n            msg.sender == papers[paperId].author,\\r\\n            \\\"Only the author can approve contributions\\\"\\r\\n        );\\r\\n        require(\\r\\n            contributionIndex < contributions[paperId].length,\\r\\n            \\\"Invalid contribution index\\\"\\r\\n        );\\r\\n        require(\\r\\n            !contributions[paperId][contributionIndex].approved,\\r\\n            \\\"Contribution already approved\\\"\\r\\n        );\\r\\n\\r\\n        Contribution storage contribution = contributions[paperId][\\r\\n            contributionIndex\\r\\n        ];\\r\\n        uint256 rewardAmount = contribution.stakeAmount +\\r\\n            ((paperAccessFees[paperId] * 10) / 100); // Reward includes 10% of the access fees earned by the paper\\r\\n\\r\\n        require(\\r\\n            token.transfer(contribution.contributor, rewardAmount),\\r\\n            \\\"Token transfer failed\\\"\\r\\n        );\\r\\n\\r\\n        // Create a new paper with the updated content\\r\\n        uint256 newPaperId = nextPaperId;\\r\\n        nextPaperId++;\\r\\n\\r\\n        papers[newPaperId] = Paper({\\r\\n            author: msg.sender,\\r\\n            title: papers[paperId].title, // Keep the title the same\\r\\n            contentHash: contribution.changesHash,\\r\\n            accessFee: papers[paperId].accessFee, // Keep the access fee the same\\r\\n            keywords: papers[paperId].keywords, // Keep the keywords the same\\r\\n            exists: true,\\r\\n            parentPaperId: paperId // Reference to the original paper\\r\\n        });\\r\\n\\r\\n        papersByOwner[msg.sender].push(newPaperId); // Add the new paper ID to the list of papers owned by the author\\r\\n\\r\\n        contribution.approved = true; // Mark the contribution as approved\\r\\n        paperAccessed[newPaperId][papers[paperId].author] = true;\\r\\n\\r\\n        emit ContributionApproved(\\r\\n            paperId,\\r\\n            newPaperId,\\r\\n            contributionIndex,\\r\\n            contribution.contributor,\\r\\n            rewardAmount\\r\\n        );\\r\\n        emit PaperUpdated(newPaperId, contribution.changesHash); // Emit event for new paper\\r\\n    }\\r\\n\\r\\n    // Function to get a list of all papers\\r\\n    function getPapers() external view returns (Paper[] memory) {\\r\\n        Paper[] memory allPapers = new Paper[](nextPaperId - 1);\\r\\n        for (uint256 i = 1; i < nextPaperId; i++) {\\r\\n            allPapers[i - 1] = papers[i];\\r\\n        }\\r\\n        return allPapers;\\r\\n    }\\r\\n\\r\\n    // Function to get a list of papers owned by a specific address\\r\\n    function getPapersByOwnerAddress(\\r\\n        address owner\\r\\n    ) external view returns (Paper[] memory) {\\r\\n        uint256[] memory paperIds = papersByOwner[owner];\\r\\n        Paper[] memory ownerPapers = new Paper[](paperIds.length);\\r\\n        for (uint256 i = 0; i < paperIds.length; i++) {\\r\\n            ownerPapers[i] = papers[paperIds[i]];\\r\\n        }\\r\\n        return ownerPapers;\\r\\n    }\\r\\n\\r\\n    // Function to get a list of contributions for a specific paper\\r\\n    function getContributions(\\r\\n        uint256 paperId\\r\\n    ) external view returns (Contribution[] memory) {\\r\\n        return contributions[paperId];\\r\\n    }\\r\\n\\r\\n    // Function to get a list of papers accessed by a specific user\\r\\n    function getPapersAccessedByUser(\\r\\n        address user\\r\\n    ) external view returns (Paper[] memory) {\\r\\n        uint256[] memory paperIds = new uint256[](nextPaperId - 1);\\r\\n        uint256 count = 0;\\r\\n\\r\\n        for (uint256 i = 1; i < nextPaperId; i++) {\\r\\n            if (paperAccessed[i][user]) {\\r\\n                paperIds[count] = i;\\r\\n                count++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        Paper[] memory accessedPapers = new Paper[](count);\\r\\n        for (uint256 i = 0; i < count; i++) {\\r\\n            accessedPapers[i] = papers[paperIds[i]];\\r\\n        }\\r\\n\\r\\n        return accessedPapers;\\r\\n    }\\r\\n\\r\\n    // Function to get the number of contributions made by a specific user\\r\\n    function getUserContributionCount(\\r\\n        address user\\r\\n    ) external view returns (uint256) {\\r\\n        return userContributionCount[user];\\r\\n    }\\r\\n\\r\\n    // Function to get paper details by paper ID\\r\\n    function getPaperById(\\r\\n        uint256 paperId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address author,\\r\\n            string memory title,\\r\\n            string memory contentHash,\\r\\n            uint256 accessFee,\\r\\n            string[] memory keywords\\r\\n        )\\r\\n    {\\r\\n        require(papers[paperId].exists, \\\"Paper does not exist\\\");\\r\\n\\r\\n        Paper storage paper = papers[paperId];\\r\\n        return (\\r\\n            paper.author,\\r\\n            paper.title,\\r\\n            paper.contentHash,\\r\\n            paper.accessFee,\\r\\n            paper.keywords\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Function to get the original paper details (the root paper)\\r\\n    function getOriginalPaper(\\r\\n        uint256 paperId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address author,\\r\\n            string memory title,\\r\\n            string memory contentHash,\\r\\n            uint256 accessFee,\\r\\n            string[] memory keywords\\r\\n        )\\r\\n    {\\r\\n        require(papers[paperId].exists, \\\"Paper does not exist\\\");\\r\\n\\r\\n        uint256 currentId = paperId;\\r\\n        while (papers[currentId].parentPaperId != 0) {\\r\\n            currentId = papers[currentId].parentPaperId; // Traverse up the chain to find the original paper\\r\\n        }\\r\\n\\r\\n        Paper storage originalPaper = papers[currentId];\\r\\n        return (\\r\\n            originalPaper.author,\\r\\n            originalPaper.title,\\r\\n            originalPaper.contentHash,\\r\\n            originalPaper.accessFee,\\r\\n            originalPaper.keywords\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcde970700c7005ab9a27dabe9db2b2b10b2a85c62666fea57a159f69c0c7a847\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c8063a1c74be5116100a2578063d05e3cc511610071578063d05e3cc51461030e578063df771aca1461033e578063e75658901461035a578063ed272a991461038a578063fc0c546a146103be5761010b565b8063a1c74be514610276578063a949dfdf14610292578063aa4a66dd146102c2578063c2414def146102de5761010b565b806377154fde116100de57806377154fde146101c55780637ed4cd87146101f5578063830e28f614610225578063972a2239146102585761010b565b80632c258c9e146101105780633e0b7810146101405780635e775a27146101745780636fd91da9146101a9575b600080fd5b61012a60048036038101906101259190612ced565b6103dc565b6040516101379190612d48565b60405180910390f35b61015a60048036038101906101559190612d63565b61040b565b60405161016b959493929190612f4a565b60405180910390f35b61018e60048036038101906101899190612d63565b6106c3565b6040516101a096959493929190612fb2565b60405180910390f35b6101c360048036038101906101be9190613021565b61083c565b005b6101df60048036038101906101da9190613061565b6110dd565b6040516101ec919061308e565b60405180910390f35b61020f600480360381019061020a9190613061565b6110f5565b60405161021c91906132c8565b60405180910390f35b61023f600480360381019061023a9190613021565b611557565b60405161024f94939291906132ea565b60405180910390f35b610260611659565b60405161026d91906132c8565b60405180910390f35b610290600480360381019061028b9190613551565b6119b0565b005b6102ac60048036038101906102a79190612d63565b611bb9565b6040516102b9919061308e565b60405180910390f35b6102dc60048036038101906102d7919061360c565b611bd1565b005b6102f860048036038101906102f39190613061565b611edc565b60405161030591906132c8565b60405180910390f35b61032860048036038101906103239190612d63565b6122c5565b60405161033591906137a0565b60405180910390f35b61035860048036038101906103539190612d63565b612444565b005b610374600480360381019061036f9190613061565b6127ae565b604051610381919061308e565b60405180910390f35b6103a4600480360381019061039f9190612d63565b6127f7565b6040516103b5959493929190612f4a565b60405180910390f35b6103c6612af2565b6040516103d39190613821565b60405180910390f35b60076020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b6000606080600060606003600087815260200190815260200160002060050160009054906101000a900460ff16610477576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046e90613888565b60405180910390fd5b60006003600088815260200190815260200160002090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600101826002018360030154846004018380546104d0906138d7565b80601f01602080910402602001604051908101604052809291908181526020018280546104fc906138d7565b80156105495780601f1061051e57610100808354040283529160200191610549565b820191906000526020600020905b81548152906001019060200180831161052c57829003601f168201915b5050505050935082805461055c906138d7565b80601f0160208091040260200160405190810160405280929190818152602001828054610588906138d7565b80156105d55780601f106105aa576101008083540402835291602001916105d5565b820191906000526020600020905b8154815290600101906020018083116105b857829003601f168201915b5050505050925080805480602002602001604051908101604052809291908181526020016000905b828210156106a957838290600052602060002001805461061c906138d7565b80601f0160208091040260200160405190810160405280929190818152602001828054610648906138d7565b80156106955780601f1061066a57610100808354040283529160200191610695565b820191906000526020600020905b81548152906001019060200180831161067857829003601f168201915b5050505050815260200190600101906105fd565b505050509050955095509550955095505091939590929450565b60036020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101805461070c906138d7565b80601f0160208091040260200160405190810160405280929190818152602001828054610738906138d7565b80156107855780601f1061075a57610100808354040283529160200191610785565b820191906000526020600020905b81548152906001019060200180831161076857829003601f168201915b50505050509080600201805461079a906138d7565b80601f01602080910402602001604051908101604052809291908181526020018280546107c6906138d7565b80156108135780601f106107e857610100808354040283529160200191610813565b820191906000526020600020905b8154815290600101906020018083116107f657829003601f168201915b5050505050908060030154908060050160009054906101000a900460ff16908060060154905086565b6003600083815260200190815260200160002060050160009054906101000a900460ff1661089f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089690613888565b60405180910390fd5b6003600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610943576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093a9061397a565b60405180910390fd5b6004600083815260200190815260200160002080549050811061099b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610992906139e6565b60405180910390fd5b6004600083815260200190815260200160002081815481106109c0576109bf613a06565b5b906000526020600020906004020160020160009054906101000a900460ff1615610a1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1690613a81565b60405180910390fd5b6000600460008481526020019081526020016000208281548110610a4657610a45613a06565b5b9060005260206000209060040201905060006064600a6005600087815260200190815260200160002054610a7a9190613ad0565b610a849190613b41565b8260030154610a939190613b72565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610b14929190613ba6565b6020604051808303816000875af1158015610b33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b579190613bfb565b610b96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8d90613c74565b60405180910390fd5b6000600154905060016000815480929190610bb090613c94565b91905055506040518060e001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001600360008881526020019081526020016000206001018054610bfd906138d7565b80601f0160208091040260200160405190810160405280929190818152602001828054610c29906138d7565b8015610c765780601f10610c4b57610100808354040283529160200191610c76565b820191906000526020600020905b815481529060010190602001808311610c5957829003601f168201915b50505050508152602001846001018054610c8f906138d7565b80601f0160208091040260200160405190810160405280929190818152602001828054610cbb906138d7565b8015610d085780601f10610cdd57610100808354040283529160200191610d08565b820191906000526020600020905b815481529060010190602001808311610ceb57829003601f168201915b505050505081526020016003600088815260200190815260200160002060030154815260200160036000888152602001908152602001600020600401805480602002602001604051908101604052809291908181526020016000905b82821015610e10578382906000526020600020018054610d83906138d7565b80601f0160208091040260200160405190810160405280929190818152602001828054610daf906138d7565b8015610dfc5780601f10610dd157610100808354040283529160200191610dfc565b820191906000526020600020905b815481529060010190602001808311610ddf57829003601f168201915b505050505081526020019060010190610d64565b505050508152602001600115158152602001868152506003600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019081610e959190613e7e565b506040820151816002019081610eab9190613e7e565b50606082015181600301556080820151816004019080519060200190610ed2929190612b16565b5060a08201518160050160006101000a81548160ff02191690831515021790555060c08201518160060155905050600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081908060018154018082558091505060019003906000526020600020016000909190919091505560018360020160006101000a81548160ff02191690831515021790555060016007600083815260200190815260200160002060006003600089815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f09b0fc1dfdfeca1d7e9d6e25a76602e33ed913671db0f6aae33735eb74b66107868387866040516110929493929190613f50565b60405180910390a27fb97425b8ec45aa7c5ccc9b938659eb11b5502276f1eec240e61baf207824396c81846001016040516110ce929190614019565b60405180910390a15050505050565b60086020528060005260406000206000915090505481565b60606000600180546111079190614049565b67ffffffffffffffff8111156111205761111f613340565b5b60405190808252806020026020018201604052801561114e5781602001602082028036833780820191505090505b509050600080600190505b600154811015611202576007600082815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156111f557808383815181106111da576111d9613a06565b5b60200260200101818152505081806111f190613c94565b9250505b8080600101915050611159565b5060008167ffffffffffffffff81111561121f5761121e613340565b5b60405190808252806020026020018201604052801561125857816020015b611245612b6f565b81526020019060019003908161123d5790505b50905060005b8281101561154b576003600085838151811061127d5761127c613a06565b5b602002602001015181526020019081526020016000206040518060e00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054611304906138d7565b80601f0160208091040260200160405190810160405280929190818152602001828054611330906138d7565b801561137d5780601f106113525761010080835404028352916020019161137d565b820191906000526020600020905b81548152906001019060200180831161136057829003601f168201915b50505050508152602001600282018054611396906138d7565b80601f01602080910402602001604051908101604052809291908181526020018280546113c2906138d7565b801561140f5780601f106113e45761010080835404028352916020019161140f565b820191906000526020600020905b8154815290600101906020018083116113f257829003601f168201915b505050505081526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156114f3578382906000526020600020018054611466906138d7565b80601f0160208091040260200160405190810160405280929190818152602001828054611492906138d7565b80156114df5780601f106114b4576101008083540402835291602001916114df565b820191906000526020600020905b8154815290600101906020018083116114c257829003601f168201915b505050505081526020019060010190611447565b5050505081526020016005820160009054906101000a900460ff1615151515815260200160068201548152505082828151811061153357611532613a06565b5b6020026020010181905250808060010191505061125e565b50809350505050919050565b6004602052816000526040600020818154811061157357600080fd5b9060005260206000209060040201600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010180546115bd906138d7565b80601f01602080910402602001604051908101604052809291908181526020018280546115e9906138d7565b80156116365780601f1061160b57610100808354040283529160200191611636565b820191906000526020600020905b81548152906001019060200180831161161957829003601f168201915b5050505050908060020160009054906101000a900460ff16908060030154905084565b606060006001805461166b9190614049565b67ffffffffffffffff81111561168457611683613340565b5b6040519080825280602002602001820160405280156116bd57816020015b6116aa612b6f565b8152602001906001900390816116a25790505b5090506000600190505b6001548110156119a857600360008281526020019081526020016000206040518060e00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054611755906138d7565b80601f0160208091040260200160405190810160405280929190818152602001828054611781906138d7565b80156117ce5780601f106117a3576101008083540402835291602001916117ce565b820191906000526020600020905b8154815290600101906020018083116117b157829003601f168201915b505050505081526020016002820180546117e7906138d7565b80601f0160208091040260200160405190810160405280929190818152602001828054611813906138d7565b80156118605780601f1061183557610100808354040283529160200191611860565b820191906000526020600020905b81548152906001019060200180831161184357829003601f168201915b505050505081526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156119445783829060005260206000200180546118b7906138d7565b80601f01602080910402602001604051908101604052809291908181526020018280546118e3906138d7565b80156119305780601f1061190557610100808354040283529160200191611930565b820191906000526020600020905b81548152906001019060200180831161191357829003601f168201915b505050505081526020019060010190611898565b5050505081526020016005820160009054906101000a900460ff161515151581526020016006820154815250508260018361197f9190614049565b815181106119905761198f613a06565b5b602002602001018190525080806001019150506116c7565b508091505090565b60006001549050600160008154809291906119ca90613c94565b91905055506040518060e001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200186815260200185815260200184815260200183815260200160011515815260200160008152506003600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019081611a8b9190613e7e565b506040820151816002019081611aa19190613e7e565b50606082015181600301556080820151816004019080519060200190611ac8929190612b16565b5060a08201518160050160006101000a81548160ff02191690831515021790555060c08201518160060155905050600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150506001900390600052602060002001600090919091909150553373ffffffffffffffffffffffffffffffffffffffff167f56eeaa024974e3268b1cdceef36baef0f1c89ce1f09afa010857b95d4aed25868287878787604051611baa95949392919061407d565b60405180910390a25050505050565b60056020528060005260406000206000915090505481565b6003600084815260200190815260200160002060050160009054906101000a900460ff16611c34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c2b90613888565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401611c91939291906140e5565b6020604051808303816000875af1158015611cb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd49190613bfb565b611d13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0a90613c74565b60405180910390fd5b6000600460008581526020019081526020016000208054905090506004600085815260200190815260200160002060405180608001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200185815260200160001515815260200184815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019081611e009190613e7e565b5060408201518160020160006101000a81548160ff021916908315150217905550606082015181600301555050600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190611e7d90613c94565b91905055503373ffffffffffffffffffffffffffffffffffffffff167fe17c01af799c5069ecf6fd9a231440a115adb7a1dea0306b06d8efe971a1a0b085838686604051611ece949392919061411c565b60405180910390a250505050565b60606000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015611f6957602002820191906000526020600020905b815481526020019060010190808311611f55575b505050505090506000815167ffffffffffffffff811115611f8d57611f8c613340565b5b604051908082528060200260200182016040528015611fc657816020015b611fb3612b6f565b815260200190600190039081611fab5790505b50905060005b82518110156122ba5760036000848381518110611fec57611feb613a06565b5b602002602001015181526020019081526020016000206040518060e00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054612073906138d7565b80601f016020809104026020016040519081016040528092919081815260200182805461209f906138d7565b80156120ec5780601f106120c1576101008083540402835291602001916120ec565b820191906000526020600020905b8154815290600101906020018083116120cf57829003601f168201915b50505050508152602001600282018054612105906138d7565b80601f0160208091040260200160405190810160405280929190818152602001828054612131906138d7565b801561217e5780601f106121535761010080835404028352916020019161217e565b820191906000526020600020905b81548152906001019060200180831161216157829003601f168201915b505050505081526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156122625783829060005260206000200180546121d5906138d7565b80601f0160208091040260200160405190810160405280929190818152602001828054612201906138d7565b801561224e5780601f106122235761010080835404028352916020019161224e565b820191906000526020600020905b81548152906001019060200180831161223157829003601f168201915b5050505050815260200190600101906121b6565b5050505081526020016005820160009054906101000a900460ff161515151581526020016006820154815250508282815181106122a2576122a1613a06565b5b60200260200101819052508080600101915050611fcc565b508092505050919050565b606060046000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561243957838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054612383906138d7565b80601f01602080910402602001604051908101604052809291908181526020018280546123af906138d7565b80156123fc5780601f106123d1576101008083540402835291602001916123fc565b820191906000526020600020905b8154815290600101906020018083116123df57829003601f168201915b505050505081526020016002820160009054906101000a900460ff16151515158152602001600382015481525050815260200190600101906122fa565b505050509050919050565b6003600082815260200190815260200160002060050160009054906101000a900460ff166124a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161249e90613888565b60405180910390fd5b6007600082815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615612545576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161253c906141da565b60405180910390fd5b6000600360008381526020019081526020016000206003015411156126dc5760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd336003600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660036000868152602001908152602001600020600301546040518463ffffffff1660e01b815260040161260d939291906140e5565b6020604051808303816000875af115801561262c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126509190613bfb565b61268f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161268690613c74565b60405180910390fd5b600360008281526020019081526020016000206003015460056000838152602001908152602001600020546126c49190613b72565b60056000838152602001908152602001600020819055505b60016007600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f1442bdb26f7569db0cb308056cb26688f7aad42fc098b54920e1af1e8b67a5fc8260036000858152602001908152602001600020600301546040516127a39291906141fa565b60405180910390a250565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000606080600060606003600087815260200190815260200160002060050160009054906101000a900460ff16612863576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161285a90613888565b60405180910390fd5b60008690505b60006003600083815260200190815260200160002060060154146128a55760036000828152602001908152602001600020600601549050612869565b60006003600083815260200190815260200160002090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600101826002018360030154846004018380546128fe906138d7565b80601f016020809104026020016040519081016040528092919081815260200182805461292a906138d7565b80156129775780601f1061294c57610100808354040283529160200191612977565b820191906000526020600020905b81548152906001019060200180831161295a57829003601f168201915b5050505050935082805461298a906138d7565b80601f01602080910402602001604051908101604052809291908181526020018280546129b6906138d7565b8015612a035780601f106129d857610100808354040283529160200191612a03565b820191906000526020600020905b8154815290600101906020018083116129e657829003601f168201915b5050505050925080805480602002602001604051908101604052809291908181526020016000905b82821015612ad7578382906000526020600020018054612a4a906138d7565b80601f0160208091040260200160405190810160405280929190818152602001828054612a76906138d7565b8015612ac35780601f10612a9857610100808354040283529160200191612ac3565b820191906000526020600020905b815481529060010190602001808311612aa657829003601f168201915b505050505081526020019060010190612a2b565b50505050905096509650965096509650505091939590929450565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b828054828255906000526020600020908101928215612b5e579160200282015b82811115612b5d578251829081612b4d9190613e7e565b5091602001919060010190612b36565b5b509050612b6b9190612bc4565b5090565b6040518060e00160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081526020016000815260200160608152602001600015158152602001600081525090565b5b80821115612be45760008181612bdb9190612be8565b50600101612bc5565b5090565b508054612bf4906138d7565b6000825580601f10612c065750612c25565b601f016020900490600052602060002090810190612c249190612c28565b5b50565b5b80821115612c41576000816000905550600101612c29565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b612c6c81612c59565b8114612c7757600080fd5b50565b600081359050612c8981612c63565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612cba82612c8f565b9050919050565b612cca81612caf565b8114612cd557600080fd5b50565b600081359050612ce781612cc1565b92915050565b60008060408385031215612d0457612d03612c4f565b5b6000612d1285828601612c7a565b9250506020612d2385828601612cd8565b9150509250929050565b60008115159050919050565b612d4281612d2d565b82525050565b6000602082019050612d5d6000830184612d39565b92915050565b600060208284031215612d7957612d78612c4f565b5b6000612d8784828501612c7a565b91505092915050565b612d9981612caf565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612dd9578082015181840152602081019050612dbe565b60008484015250505050565b6000601f19601f8301169050919050565b6000612e0182612d9f565b612e0b8185612daa565b9350612e1b818560208601612dbb565b612e2481612de5565b840191505092915050565b612e3881612c59565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000612e8682612d9f565b612e908185612e6a565b9350612ea0818560208601612dbb565b612ea981612de5565b840191505092915050565b6000612ec08383612e7b565b905092915050565b6000602082019050919050565b6000612ee082612e3e565b612eea8185612e49565b935083602082028501612efc85612e5a565b8060005b85811015612f385784840389528151612f198582612eb4565b9450612f2483612ec8565b925060208a01995050600181019050612f00565b50829750879550505050505092915050565b600060a082019050612f5f6000830188612d90565b8181036020830152612f718187612df6565b90508181036040830152612f858186612df6565b9050612f946060830185612e2f565b8181036080830152612fa68184612ed5565b90509695505050505050565b600060c082019050612fc76000830189612d90565b8181036020830152612fd98188612df6565b90508181036040830152612fed8187612df6565b9050612ffc6060830186612e2f565b6130096080830185612d39565b61301660a0830184612e2f565b979650505050505050565b6000806040838503121561303857613037612c4f565b5b600061304685828601612c7a565b925050602061305785828601612c7a565b9150509250929050565b60006020828403121561307757613076612c4f565b5b600061308584828501612cd8565b91505092915050565b60006020820190506130a36000830184612e2f565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6130de81612caf565b82525050565b6130ed81612c59565b82525050565b600082825260208201905092915050565b600061310f82612e3e565b61311981856130f3565b93508360208202850161312b85612e5a565b8060005b8581101561316757848403895281516131488582612eb4565b945061315383612ec8565b925060208a0199505060018101905061312f565b50829750879550505050505092915050565b61318281612d2d565b82525050565b600060e0830160008301516131a060008601826130d5565b50602083015184820360208601526131b88282612e7b565b915050604083015184820360408601526131d28282612e7b565b91505060608301516131e760608601826130e4565b50608083015184820360808601526131ff8282613104565b91505060a083015161321460a0860182613179565b5060c083015161322760c08601826130e4565b508091505092915050565b600061323e8383613188565b905092915050565b6000602082019050919050565b600061325e826130a9565b61326881856130b4565b93508360208202850161327a856130c5565b8060005b858110156132b657848403895281516132978582613232565b94506132a283613246565b925060208a0199505060018101905061327e565b50829750879550505050505092915050565b600060208201905081810360008301526132e28184613253565b905092915050565b60006080820190506132ff6000830187612d90565b81810360208301526133118186612df6565b90506133206040830185612d39565b61332d6060830184612e2f565b95945050505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61337882612de5565b810181811067ffffffffffffffff8211171561339757613396613340565b5b80604052505050565b60006133aa612c45565b90506133b6828261336f565b919050565b600067ffffffffffffffff8211156133d6576133d5613340565b5b6133df82612de5565b9050602081019050919050565b82818337600083830152505050565b600061340e613409846133bb565b6133a0565b90508281526020810184848401111561342a5761342961333b565b5b6134358482856133ec565b509392505050565b600082601f83011261345257613451613336565b5b81356134628482602086016133fb565b91505092915050565b600067ffffffffffffffff82111561348657613485613340565b5b602082029050602081019050919050565b600080fd5b60006134af6134aa8461346b565b6133a0565b905080838252602082019050602084028301858111156134d2576134d1613497565b5b835b8181101561351957803567ffffffffffffffff8111156134f7576134f6613336565b5b808601613504898261343d565b855260208501945050506020810190506134d4565b5050509392505050565b600082601f83011261353857613537613336565b5b813561354884826020860161349c565b91505092915050565b6000806000806080858703121561356b5761356a612c4f565b5b600085013567ffffffffffffffff81111561358957613588612c54565b5b6135958782880161343d565b945050602085013567ffffffffffffffff8111156135b6576135b5612c54565b5b6135c28782880161343d565b93505060406135d387828801612c7a565b925050606085013567ffffffffffffffff8111156135f4576135f3612c54565b5b61360087828801613523565b91505092959194509250565b60008060006060848603121561362557613624612c4f565b5b600061363386828701612c7a565b935050602084013567ffffffffffffffff81111561365457613653612c54565b5b6136608682870161343d565b925050604061367186828701612c7a565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006080830160008301516136bf60008601826130d5565b50602083015184820360208601526136d78282612e7b565b91505060408301516136ec6040860182613179565b5060608301516136ff60608601826130e4565b508091505092915050565b600061371683836136a7565b905092915050565b6000602082019050919050565b60006137368261367b565b6137408185613686565b93508360208202850161375285613697565b8060005b8581101561378e578484038952815161376f858261370a565b945061377a8361371e565b925060208a01995050600181019050613756565b50829750879550505050505092915050565b600060208201905081810360008301526137ba818461372b565b905092915050565b6000819050919050565b60006137e76137e26137dd84612c8f565b6137c2565b612c8f565b9050919050565b60006137f9826137cc565b9050919050565b600061380b826137ee565b9050919050565b61381b81613800565b82525050565b60006020820190506138366000830184613812565b92915050565b7f506170657220646f6573206e6f74206578697374000000000000000000000000600082015250565b6000613872601483612daa565b915061387d8261383c565b602082019050919050565b600060208201905081810360008301526138a181613865565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806138ef57607f821691505b602082108103613902576139016138a8565b5b50919050565b7f4f6e6c792074686520617574686f722063616e20617070726f766520636f6e7460008201527f7269627574696f6e730000000000000000000000000000000000000000000000602082015250565b6000613964602983612daa565b915061396f82613908565b604082019050919050565b6000602082019050818103600083015261399381613957565b9050919050565b7f496e76616c696420636f6e747269627574696f6e20696e646578000000000000600082015250565b60006139d0601a83612daa565b91506139db8261399a565b602082019050919050565b600060208201905081810360008301526139ff816139c3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f436f6e747269627574696f6e20616c726561647920617070726f766564000000600082015250565b6000613a6b601d83612daa565b9150613a7682613a35565b602082019050919050565b60006020820190508181036000830152613a9a81613a5e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613adb82612c59565b9150613ae683612c59565b9250828202613af481612c59565b91508282048414831517613b0b57613b0a613aa1565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613b4c82612c59565b9150613b5783612c59565b925082613b6757613b66613b12565b5b828204905092915050565b6000613b7d82612c59565b9150613b8883612c59565b9250828201905080821115613ba057613b9f613aa1565b5b92915050565b6000604082019050613bbb6000830185612d90565b613bc86020830184612e2f565b9392505050565b613bd881612d2d565b8114613be357600080fd5b50565b600081519050613bf581613bcf565b92915050565b600060208284031215613c1157613c10612c4f565b5b6000613c1f84828501613be6565b91505092915050565b7f546f6b656e207472616e73666572206661696c65640000000000000000000000600082015250565b6000613c5e601583612daa565b9150613c6982613c28565b602082019050919050565b60006020820190508181036000830152613c8d81613c51565b9050919050565b6000613c9f82612c59565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613cd157613cd0613aa1565b5b600182019050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613d3e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613d01565b613d488683613d01565b95508019841693508086168417925050509392505050565b6000613d7b613d76613d7184612c59565b6137c2565b612c59565b9050919050565b6000819050919050565b613d9583613d60565b613da9613da182613d82565b848454613d0e565b825550505050565b600090565b613dbe613db1565b613dc9818484613d8c565b505050565b5b81811015613ded57613de2600082613db6565b600181019050613dcf565b5050565b601f821115613e3257613e0381613cdc565b613e0c84613cf1565b81016020851015613e1b578190505b613e2f613e2785613cf1565b830182613dce565b50505b505050565b600082821c905092915050565b6000613e5560001984600802613e37565b1980831691505092915050565b6000613e6e8383613e44565b9150826002028217905092915050565b613e8782612d9f565b67ffffffffffffffff811115613ea057613e9f613340565b5b613eaa82546138d7565b613eb5828285613df1565b600060209050601f831160018114613ee85760008415613ed6578287015190505b613ee08582613e62565b865550613f48565b601f198416613ef686613cdc565b60005b82811015613f1e57848901518255600182019150602085019450602081019050613ef9565b86831015613f3b5784890151613f37601f891682613e44565b8355505b6001600288020188555050505b505050505050565b6000608082019050613f656000830187612e2f565b613f726020830186612e2f565b613f7f6040830185612e2f565b613f8c6060830184612e2f565b95945050505050565b60008154613fa2816138d7565b613fac8186612daa565b94506001821660008114613fc75760018114613fdd57614010565b60ff198316865281151560200286019350614010565b613fe685613cdc565b60005b8381101561400857815481890152600182019150602081019050613fe9565b808801955050505b50505092915050565b600060408201905061402e6000830185612e2f565b81810360208301526140408184613f95565b90509392505050565b600061405482612c59565b915061405f83612c59565b925082820390508181111561407757614076613aa1565b5b92915050565b600060a0820190506140926000830188612e2f565b81810360208301526140a48187612df6565b905081810360408301526140b88186612df6565b90506140c76060830185612e2f565b81810360808301526140d98184612ed5565b90509695505050505050565b60006060820190506140fa6000830186612d90565b6141076020830185612d90565b6141146040830184612e2f565b949350505050565b60006080820190506141316000830187612e2f565b61413e6020830186612e2f565b81810360408301526141508185612df6565b905061415f6060830184612e2f565b95945050505050565b7f5573657220616c7265616479206861732061636365737320746f20746869732060008201527f7061706572000000000000000000000000000000000000000000000000000000602082015250565b60006141c4602583612daa565b91506141cf82614168565b604082019050919050565b600060208201905081810360008301526141f3816141b7565b9050919050565b600060408201905061420f6000830185612e2f565b61421c6020830184612e2f565b939250505056fea2646970667358221220f1b17c604dfdd82fb0b166fe93b8badb0bfb32f5cca7450445a35eca8ffa7ca064736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 822,
        "contract": "contracts/MedicalResearch.sol:MedicalResearch",
        "label": "token",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ERC20)651"
      },
      {
        "astId": 849,
        "contract": "contracts/MedicalResearch.sol:MedicalResearch",
        "label": "nextPaperId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 851,
        "contract": "contracts/MedicalResearch.sol:MedicalResearch",
        "label": "nextContributionIndex",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 856,
        "contract": "contracts/MedicalResearch.sol:MedicalResearch",
        "label": "papers",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Paper)838_storage)"
      },
      {
        "astId": 862,
        "contract": "contracts/MedicalResearch.sol:MedicalResearch",
        "label": "contributions",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_array(t_struct(Contribution)847_storage)dyn_storage)"
      },
      {
        "astId": 866,
        "contract": "contracts/MedicalResearch.sol:MedicalResearch",
        "label": "paperAccessFees",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 871,
        "contract": "contracts/MedicalResearch.sol:MedicalResearch",
        "label": "papersByOwner",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 877,
        "contract": "contracts/MedicalResearch.sol:MedicalResearch",
        "label": "paperAccessed",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 881,
        "contract": "contracts/MedicalResearch.sol:MedicalResearch",
        "label": "userContributionCount",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Contribution)847_storage)dyn_storage": {
        "base": "t_struct(Contribution)847_storage",
        "encoding": "dynamic_array",
        "label": "struct MedicalResearch.Contribution[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ERC20)651": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_struct(Contribution)847_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MedicalResearch.Contribution[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Contribution)847_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(Paper)838_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MedicalResearch.Paper)",
        "numberOfBytes": "32",
        "value": "t_struct(Paper)838_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Contribution)847_storage": {
        "encoding": "inplace",
        "label": "struct MedicalResearch.Contribution",
        "members": [
          {
            "astId": 840,
            "contract": "contracts/MedicalResearch.sol:MedicalResearch",
            "label": "contributor",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 842,
            "contract": "contracts/MedicalResearch.sol:MedicalResearch",
            "label": "changesHash",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 844,
            "contract": "contracts/MedicalResearch.sol:MedicalResearch",
            "label": "approved",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 846,
            "contract": "contracts/MedicalResearch.sol:MedicalResearch",
            "label": "stakeAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Paper)838_storage": {
        "encoding": "inplace",
        "label": "struct MedicalResearch.Paper",
        "members": [
          {
            "astId": 824,
            "contract": "contracts/MedicalResearch.sol:MedicalResearch",
            "label": "author",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 826,
            "contract": "contracts/MedicalResearch.sol:MedicalResearch",
            "label": "title",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 828,
            "contract": "contracts/MedicalResearch.sol:MedicalResearch",
            "label": "contentHash",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 830,
            "contract": "contracts/MedicalResearch.sol:MedicalResearch",
            "label": "accessFee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 833,
            "contract": "contracts/MedicalResearch.sol:MedicalResearch",
            "label": "keywords",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 835,
            "contract": "contracts/MedicalResearch.sol:MedicalResearch",
            "label": "exists",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 837,
            "contract": "contracts/MedicalResearch.sol:MedicalResearch",
            "label": "parentPaperId",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}