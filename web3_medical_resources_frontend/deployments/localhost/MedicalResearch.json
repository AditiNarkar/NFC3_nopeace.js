{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPaperId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPaperId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contributionIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        }
      ],
      "name": "ContributionApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paperId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contributionIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "changesHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        }
      ],
      "name": "ContributionSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paperId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feePaid",
          "type": "uint256"
        }
      ],
      "name": "PaperAccessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPaperId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newContentHash",
          "type": "string"
        }
      ],
      "name": "PaperUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paperId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "contentHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accessFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "keywords",
          "type": "string[]"
        }
      ],
      "name": "PaperUploaded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "paperId",
          "type": "uint256"
        }
      ],
      "name": "accessPaper",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "paperId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "contributionIndex",
          "type": "uint256"
        }
      ],
      "name": "approveContribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "contributions",
      "outputs": [
        {
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "changesHash",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "s",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "paperId",
          "type": "uint256"
        }
      ],
      "name": "getAccessibillity",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "paperId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getContributionByIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "contributor",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "changesHash",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "stakeAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct MedicalResearch.Contribution",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getOwnerPaperCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "paperId",
          "type": "uint256"
        }
      ],
      "name": "getPaperById",
      "outputs": [
        {
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "contentHash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "accessFee",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "keywords",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "parentPaperId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPaperIdByOwnerAndIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getPapersAccessedByUser",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalPaperCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ownerPaperCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ownerPapers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "paperAccessFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "paperAccessed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "paperContributionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "papers",
      "outputs": [
        {
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "contentHash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "accessFee",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "parentPaperId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "paperId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "changesHash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        }
      ],
      "name": "submitContribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "contentHash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "accessFee",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "keywords",
          "type": "string[]"
        }
      ],
      "name": "uploadPaper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userContributionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb8be99b10080ad9787922cf34d99b8897d8531a38db48c3f9cb03d528ab8e9c0",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "3211187",
    "logsBloom": "0x
    "blockHash": "0x29b32f059a7d26f901e01c3af8864063169069fafe2d8a01286356ca869c5d5f",
    "transactionHash": "0xb8be99b10080ad9787922cf34d99b8897d8531a38db48c3f9cb03d528ab8e9c0",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "3211187",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "e5a7b05a8cee07dfdde95c81621015d2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPaperId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPaperId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contributionIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"ContributionApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paperId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contributionIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"changesHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"ContributionSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paperId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePaid\",\"type\":\"uint256\"}],\"name\":\"PaperAccessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPaperId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newContentHash\",\"type\":\"string\"}],\"name\":\"PaperUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paperId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contentHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accessFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"keywords\",\"type\":\"string[]\"}],\"name\":\"PaperUploaded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paperId\",\"type\":\"uint256\"}],\"name\":\"accessPaper\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paperId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionIndex\",\"type\":\"uint256\"}],\"name\":\"approveContribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contributions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"changesHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"s\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"paperId\",\"type\":\"uint256\"}],\"name\":\"getAccessibillity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paperId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getContributionByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"changesHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct MedicalResearch.Contribution\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getOwnerPaperCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paperId\",\"type\":\"uint256\"}],\"name\":\"getPaperById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contentHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"accessFee\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"keywords\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"parentPaperId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPaperIdByOwnerAndIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPapersAccessedByUser\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPaperCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerPaperCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerPapers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paperAccessFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paperAccessed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paperContributionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"papers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contentHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"accessFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"parentPaperId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paperId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"changesHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"submitContribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contentHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"accessFee\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"keywords\",\"type\":\"string[]\"}],\"name\":\"uploadPaper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userContributionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MedicalResearch.sol\":\"MedicalResearch\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/MedicalResearch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract MedicalResearch {\\n    // ERC20 token used for payments and staking\\n    ERC20 public token;\\n\\n    // Struct to represent a research paper\\n    struct Paper {\\n        address author; // Address of the paper's author\\n        string title; // Title of the paper\\n        string contentHash; // Hash of the content to ensure integrity\\n        uint256 accessFee; // Fee in tokens to access the paper\\n        string[] keywords; // Array of keywords related to the paper\\n        bool exists; // Flag to indicate if the paper exists\\n        uint256 parentPaperId; // ID of the original paper (0 if original)\\n    }\\n\\n    // Struct to represent a contribution to a paper\\n    struct Contribution {\\n        address contributor; // Address of the contributor\\n        string changesHash; // Hash of the changes made\\n        bool approved; // Flag to indicate if the contribution is approved\\n        uint256 stakeAmount; // Amount of tokens staked for the contribution\\n    }\\n\\n    uint256 private nextPaperId; // Counter for generating new paper IDs\\n    uint256 private nextContributionIndex; // Counter for generating new contribution indices\\n    uint private totalPaperCount;\\n\\n    // Mappings to store papers, contributions, access fees, and other data\\n    mapping(uint256 => Paper) public papers; // Mapping from paper ID to Paper struct\\n    mapping(uint256 => mapping(uint256 => Contribution)) public contributions; // Mapping from paper ID to a mapping of contribution indices to Contribution structs\\n    mapping(uint256 => uint256) public paperContributionCount; // Mapping from paper ID to the number of contributions it has received\\n    mapping(uint256 => uint256) public paperAccessFees; // Mapping from paper ID to total access fees earned\\n    mapping(address => mapping(uint256 => bool)) public paperAccessed; // Mapping from user address to paper ID to access status\\n    mapping(address => uint256) public userContributionCount; // Mapping from user address to number of contributions made\\n    mapping(address => mapping(uint256 => uint256)) public ownerPapers; // Mapping from owner address to an index-to-paperId mapping\\n    mapping(address => uint256) public ownerPaperCount; // Mapping from owner address to the number of papers they own\\n\\n    // Events to log actions in the contract\\n    event PaperUploaded(\\n        uint256 paperId,\\n        address indexed author,\\n        string title,\\n        string contentHash,\\n        uint256 accessFee,\\n        string[] keywords\\n    );\\n    event ContributionSubmitted(\\n        uint256 paperId,\\n        uint256 contributionIndex,\\n        address indexed contributor,\\n        string changesHash,\\n        uint256 stakeAmount\\n    );\\n    event ContributionApproved(\\n        uint256 oldPaperId,\\n        uint256 newPaperId,\\n        uint256 contributionIndex,\\n        address indexed contributor,\\n        uint256 rewardAmount\\n    );\\n    event PaperAccessed(uint256 paperId, address indexed user, uint256 feePaid);\\n    event PaperUpdated(uint256 newPaperId, string newContentHash); // Event for new paper update\\n\\n    // Constructor to initialize the contract with the token address\\n    constructor(address _tokenAddress) {\\n        token = ERC20(_tokenAddress);\\n        nextPaperId = 1; // Start paper IDs from 1\\n        nextContributionIndex = 0; // Start contribution indices from 0\\n        totalPaperCount = 0;\\n    }\\n\\n    // Function to upload a new paper\\n    function uploadPaper(\\n        string memory title,\\n        string memory contentHash,\\n        uint256 accessFee,\\n        string[] memory keywords\\n    ) external {\\n        uint256 paperId = nextPaperId;\\n        nextPaperId++; // Increment the paper ID counter\\n\\n        papers[paperId] = Paper({\\n            author: msg.sender,\\n            title: title,\\n            contentHash: contentHash,\\n            accessFee: accessFee,\\n            keywords: keywords,\\n            exists: true,\\n            parentPaperId: 0 // No parent for original papers\\n        });\\n\\n        ownerPapers[msg.sender][ownerPaperCount[msg.sender]] = paperId;\\n        ownerPaperCount[msg.sender]++; // Increment the count of papers owned by the author\\n        totalPaperCount++;\\n        paperAccessed[msg.sender][paperId] = true;\\n\\n        emit PaperUploaded(\\n            paperId,\\n            msg.sender,\\n            title,\\n            contentHash,\\n            accessFee,\\n            keywords\\n        );\\n    }\\n\\n    // Function to access a paper by paying the access fee\\n    function accessPaper(uint256 paperId) external payable {\\n        require(papers[paperId].exists, \\\"Paper does not exist\\\");\\n        require(\\n            !paperAccessed[msg.sender][paperId],\\n            \\\"User already has access to this paper\\\"\\n        );\\n\\n        bool success = token.transferFrom(\\n            msg.sender,\\n            papers[paperId].author,\\n            papers[paperId].accessFee\\n        );\\n        if (success) {\\n            paperAccessFees[paperId] += papers[paperId].accessFee; // Add the fee to the total access fees\\n\\n            paperAccessed[msg.sender][paperId] = true; // Mark the paper as accessed by the user\\n\\n            emit PaperAccessed(paperId, msg.sender, papers[paperId].accessFee);\\n        }\\n    }\\n\\n    // Function to submit a contribution to a paper\\n    function submitContribution(\\n        uint256 paperId,\\n        string memory changesHash,\\n        uint256 stakeAmount\\n    ) external {\\n        require(papers[paperId].exists, \\\"Paper does not exist\\\");\\n        require(\\n            token.transferFrom(msg.sender, address(this), stakeAmount),\\n            \\\"Token transfer failed\\\"\\n        );\\n\\n        uint256 contributionIndex = paperContributionCount[paperId]; // Get the index for the new contribution\\n        paperContributionCount[paperId]++; // Increment the contribution count for the paper\\n\\n        contributions[paperId][contributionIndex] = Contribution({\\n            contributor: msg.sender,\\n            changesHash: changesHash,\\n            approved: false,\\n            stakeAmount: stakeAmount\\n        });\\n\\n        userContributionCount[msg.sender]++; // Increment the contribution count for the user\\n\\n        emit ContributionSubmitted(\\n            paperId,\\n            contributionIndex,\\n            msg.sender,\\n            changesHash,\\n            stakeAmount\\n        );\\n    }\\n\\n    // Function to approve a contribution to a paper\\n    function approveContribution(\\n        uint256 paperId,\\n        uint256 contributionIndex\\n    ) external {\\n        require(papers[paperId].exists, \\\"Paper does not exist\\\");\\n        require(\\n            msg.sender == papers[paperId].author,\\n            \\\"Only the author can approve contributions\\\"\\n        );\\n        require(\\n            contributionIndex < paperContributionCount[paperId],\\n            \\\"Invalid contribution index\\\"\\n        );\\n        require(\\n            !contributions[paperId][contributionIndex].approved,\\n            \\\"Contribution already approved\\\"\\n        );\\n\\n        Contribution storage contribution = contributions[paperId][\\n            contributionIndex\\n        ];\\n        uint256 rewardAmount = contribution.stakeAmount +\\n            ((paperAccessFees[paperId] * 10) / 100); // Reward includes 10% of the access fees earned by the paper\\n\\n        require(\\n            token.transfer(contribution.contributor, rewardAmount),\\n            \\\"Token transfer failed\\\"\\n        );\\n\\n        // Create a new paper with the updated content\\n        uint256 newPaperId = nextPaperId;\\n        nextPaperId++;\\n\\n        papers[newPaperId] = Paper({\\n            author: msg.sender,\\n            title: papers[paperId].title, // Keep the title the same\\n            contentHash: contribution.changesHash,\\n            accessFee: papers[paperId].accessFee, // Keep the access fee the same\\n            keywords: papers[paperId].keywords, // Keep the keywords the same\\n            exists: true,\\n            parentPaperId: paperId // Reference to the original paper\\n        });\\n\\n        ownerPapers[msg.sender][ownerPaperCount[msg.sender]] = newPaperId;\\n        ownerPaperCount[msg.sender]++; // Increment the count of papers owned by the author\\n\\n        contribution.approved = true; // Mark the contribution as approved\\n        paperAccessed[msg.sender][newPaperId] = true;\\n\\n        emit ContributionApproved(\\n            paperId,\\n            newPaperId,\\n            contributionIndex,\\n            contribution.contributor,\\n            rewardAmount\\n        );\\n        emit PaperUpdated(newPaperId, contribution.changesHash); // Emit event for new paper\\n    }\\n\\n    // Function to get the total count of papers owned by an address\\n    function getOwnerPaperCount(address owner) external view returns (uint256) {\\n        return ownerPaperCount[owner];\\n    }\\n\\n    // Function to get the paper ID owned by an address at a specific index\\n    function getPaperIdByOwnerAndIndex(\\n        address owner,\\n        uint256 index\\n    ) external view returns (uint256) {\\n        require(index < ownerPaperCount[owner], \\\"Index out of bounds\\\");\\n        return ownerPapers[owner][index];\\n    }\\n\\n    // Function to get the contribution details by paper ID and contribution index\\n    function getContributionByIndex(\\n        uint256 paperId,\\n        uint256 index\\n    ) external view returns (Contribution memory) {\\n        require(index < paperContributionCount[paperId], \\\"Index out of bounds\\\");\\n        return contributions[paperId][index];\\n    }\\n\\n    // Function to get paper details by paper ID\\n    function getPaperById(\\n        uint256 paperId\\n    )\\n        external\\n        view\\n        returns (\\n            address author,\\n            string memory title,\\n            string memory contentHash,\\n            uint256 accessFee,\\n            string[] memory keywords,\\n            uint256 parentPaperId\\n        )\\n    {\\n        require(papers[paperId].exists, \\\"Paper does not exist\\\");\\n        Paper memory paper = papers[paperId];\\n        return (\\n            paper.author,\\n            paper.title,\\n            paper.contentHash,\\n            paper.accessFee,\\n            paper.keywords,\\n            paper.parentPaperId\\n        );\\n    }\\n\\n    // Function to get the total count of papers in the contract\\n    function getTotalPaperCount() external view returns (uint256) {\\n        return totalPaperCount;\\n    }\\n\\n    function getAccessibillity(\\n        address s,\\n        uint paperId\\n    ) public view returns (bool) {\\n        return paperAccessed[s][paperId];\\n    }\\n\\n    // Function to get the list of paper IDs accessed by a user\\n    function getPapersAccessedByUser(\\n        address user\\n    ) external view returns (uint256[] memory) {\\n        uint256 paperCount = 0;\\n        // Calculate the number of papers accessed by the user\\n        for (uint256 i = 1; i <= nextPaperId; i++) {\\n            if (paperAccessed[user][i]) {\\n                paperCount++;\\n            }\\n        }\\n\\n        uint256[] memory accessedPapers = new uint256[](paperCount);\\n        uint256 index = 0;\\n        // Collect the paper IDs\\n        for (uint256 i = 1; i <= nextPaperId; i++) {\\n            if (paperAccessed[user][i]) {\\n                accessedPapers[index] = i;\\n                index++;\\n            }\\n        }\\n        return accessedPapers;\\n    }\\n}\\n\",\"keccak256\":\"0x5af06fe75851f7b9a22b72364bf9f127f61a567c2147bb00885e2b8cb42078f9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061011f5760003560e01c8063a1c74be5116100a0578063df771aca11610064578063df771aca14610476578063e9436a2814610492578063f1857f36146104cf578063f690ab2f1461050c578063fc0c546a146105495761011f565b8063a1c74be51461037f578063a949dfdf146103a8578063aa4a66dd146103e5578063ad965ae61461040e578063dc740fa8146104395761011f565b806377154fde116100e757806377154fde1461024b5780637ed4cd8714610288578063830e28f6146102c557806387f0c8ac146103055780638936c143146103425761011f565b8063159f392714610124578063218ace50146101615780633e0b78101461019e5780635e775a27146101e05780636fd91da914610222575b600080fd5b34801561013057600080fd5b5061014b6004803603810190610146919061249f565b610574565b60405161015891906124ee565b60405180910390f35b34801561016d57600080fd5b5061018860048036038101906101839190612509565b610650565b6040516101959190612675565b60405180910390f35b3480156101aa57600080fd5b506101c560048036038101906101c09190612697565b6107f1565b6040516101d7969594939291906127df565b60405180910390f35b3480156101ec57600080fd5b5061020760048036038101906102029190612697565b610b37565b60405161021996959493929190612864565b60405180910390f35b34801561022e57600080fd5b5061024960048036038101906102449190612509565b610cb0565b005b34801561025757600080fd5b50610272600480360381019061026d91906128d3565b61157d565b60405161027f91906124ee565b60405180910390f35b34801561029457600080fd5b506102af60048036038101906102aa91906128d3565b611595565b6040516102bc91906129af565b60405180910390f35b3480156102d157600080fd5b506102ec60048036038101906102e79190612509565b61173d565b6040516102fc94939291906129d1565b60405180910390f35b34801561031157600080fd5b5061032c60048036038101906103279190612697565b61182f565b60405161033991906124ee565b60405180910390f35b34801561034e57600080fd5b506103696004803603810190610364919061249f565b611847565b6040516103769190612a1d565b60405180910390f35b34801561038b57600080fd5b506103a660048036038101906103a19190612c53565b6118af565b005b3480156103b457600080fd5b506103cf60048036038101906103ca9190612697565b611bbc565b6040516103dc91906124ee565b60405180910390f35b3480156103f157600080fd5b5061040c60048036038101906104079190612d0e565b611bd4565b005b34801561041a57600080fd5b50610423611eee565b60405161043091906124ee565b60405180910390f35b34801561044557600080fd5b50610460600480360381019061045b91906128d3565b611ef8565b60405161046d91906124ee565b60405180910390f35b610490600480360381019061048b9190612697565b611f41565b005b34801561049e57600080fd5b506104b960048036038101906104b491906128d3565b61224d565b6040516104c691906124ee565b60405180910390f35b3480156104db57600080fd5b506104f660048036038101906104f1919061249f565b612265565b6040516105039190612a1d565b60405180910390f35b34801561051857600080fd5b50610533600480360381019061052e919061249f565b612294565b60405161054091906124ee565b60405180910390f35b34801561055557600080fd5b5061055e6122b9565b60405161056b9190612ddc565b60405180910390f35b6000600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482106105f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ee90612e43565b60405180910390fd5b600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b6106586122dd565b600660008481526020019081526020016000205482106106ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a490612e43565b60405180910390fd5b6005600084815260200190815260200160002060008381526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805461074290612e92565b80601f016020809104026020016040519081016040528092919081815260200182805461076e90612e92565b80156107bb5780601f10610790576101008083540402835291602001916107bb565b820191906000526020600020905b81548152906001019060200180831161079e57829003601f168201915b505050505081526020016002820160009054906101000a900460ff16151515158152602001600382015481525050905092915050565b60006060806000606060006004600088815260200190815260200160002060050160009054906101000a900460ff1661085f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085690612f0f565b60405180910390fd5b6000600460008981526020019081526020016000206040518060e00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180546108e590612e92565b80601f016020809104026020016040519081016040528092919081815260200182805461091190612e92565b801561095e5780601f106109335761010080835404028352916020019161095e565b820191906000526020600020905b81548152906001019060200180831161094157829003601f168201915b5050505050815260200160028201805461097790612e92565b80601f01602080910402602001604051908101604052809291908181526020018280546109a390612e92565b80156109f05780601f106109c5576101008083540402835291602001916109f0565b820191906000526020600020905b8154815290600101906020018083116109d357829003601f168201915b505050505081526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020016000905b82821015610ad4578382906000526020600020018054610a4790612e92565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7390612e92565b8015610ac05780601f10610a9557610100808354040283529160200191610ac0565b820191906000526020600020905b815481529060010190602001808311610aa357829003601f168201915b505050505081526020019060010190610a28565b5050505081526020016005820160009054906101000a900460ff161515151581526020016006820154815250509050806000015181602001518260400151836060015184608001518560c001519650965096509650965096505091939550919395565b60046020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001018054610b8090612e92565b80601f0160208091040260200160405190810160405280929190818152602001828054610bac90612e92565b8015610bf95780601f10610bce57610100808354040283529160200191610bf9565b820191906000526020600020905b815481529060010190602001808311610bdc57829003601f168201915b505050505090806002018054610c0e90612e92565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3a90612e92565b8015610c875780601f10610c5c57610100808354040283529160200191610c87565b820191906000526020600020905b815481529060010190602001808311610c6a57829003601f168201915b5050505050908060030154908060050160009054906101000a900460ff16908060060154905086565b6004600083815260200190815260200160002060050160009054906101000a900460ff16610d13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0a90612f0f565b60405180910390fd5b6004600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610db7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dae90612fa1565b60405180910390fd5b60066000838152602001908152602001600020548110610e0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e039061300d565b60405180910390fd5b60056000838152602001908152602001600020600082815260200190815260200160002060020160009054906101000a900460ff1615610e81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7890613079565b60405180910390fd5b6000600560008481526020019081526020016000206000838152602001908152602001600020905060006064600a6007600087815260200190815260200160002054610ecd91906130c8565b610ed79190613139565b8260030154610ee6919061316a565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610f6792919061319e565b6020604051808303816000875af1158015610f86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610faa91906131f3565b610fe9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe09061326c565b60405180910390fd5b60006001549050600160008154809291906110039061328c565b91905055506040518060e001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200160046000888152602001908152602001600020600101805461105090612e92565b80601f016020809104026020016040519081016040528092919081815260200182805461107c90612e92565b80156110c95780601f1061109e576101008083540402835291602001916110c9565b820191906000526020600020905b8154815290600101906020018083116110ac57829003601f168201915b505050505081526020018460010180546110e290612e92565b80601f016020809104026020016040519081016040528092919081815260200182805461110e90612e92565b801561115b5780601f106111305761010080835404028352916020019161115b565b820191906000526020600020905b81548152906001019060200180831161113e57829003601f168201915b505050505081526020016004600088815260200190815260200160002060030154815260200160046000888152602001908152602001600020600401805480602002602001604051908101604052809291908181526020016000905b828210156112635783829060005260206000200180546111d690612e92565b80601f016020809104026020016040519081016040528092919081815260200182805461120290612e92565b801561124f5780601f106112245761010080835404028352916020019161124f565b820191906000526020600020905b81548152906001019060200180831161123257829003601f168201915b5050505050815260200190600101906111b7565b505050508152602001600115158152602001868152506004600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190816112e89190613476565b5060408201518160020190816112fe9190613476565b5060608201518160030155608082015181600401908051906020019061132592919061231d565b5060a08201518160050160006101000a81548160ff02191690831515021790555060c0820151816006015590505080600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815260200190815260200160002081905550600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906114379061328c565b919050555060018360020160006101000a81548160ff0219169083151502179055506001600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060006101000a81548160ff0219169083151502179055508260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f09b0fc1dfdfeca1d7e9d6e25a76602e33ed913671db0f6aae33735eb74b66107868387866040516115329493929190613548565b60405180910390a27fb97425b8ec45aa7c5ccc9b938659eb11b5502276f1eec240e61baf207824396c818460010160405161156e929190613611565b60405180910390a15050505050565b60096020528060005260406000206000915090505481565b6060600080600190505b600154811161162d57600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002060009054906101000a900460ff161561161a5781806116169061328c565b9250505b80806116259061328c565b91505061159f565b5060008167ffffffffffffffff81111561164a57611649612a42565b5b6040519080825280602002602001820160405280156116785781602001602082028036833780820191505090505b509050600080600190505b600154811161173157600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002060009054906101000a900460ff161561171e578083838151811061170357611702613641565b5b602002602001018181525050818061171a9061328c565b9250505b80806117299061328c565b915050611683565b50819350505050919050565b6005602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101805461179390612e92565b80601f01602080910402602001604051908101604052809291908181526020018280546117bf90612e92565b801561180c5780601f106117e15761010080835404028352916020019161180c565b820191906000526020600020905b8154815290600101906020018083116117ef57829003601f168201915b5050505050908060020160009054906101000a900460ff16908060030154905084565b60066020528060005260406000206000915090505481565b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16905092915050565b60006001549050600160008154809291906118c99061328c565b91905055506040518060e001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200186815260200185815260200184815260200183815260200160011515815260200160008152506004600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101908161198a9190613476565b5060408201518160020190816119a09190613476565b506060820151816003015560808201518160040190805190602001906119c792919061231d565b5060a08201518160050160006101000a81548160ff02191690831515021790555060c0820151816006015590505080600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815260200190815260200160002081905550600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190611ad99061328c565b919050555060036000815480929190611af19061328c565b91905055506001600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f56eeaa024974e3268b1cdceef36baef0f1c89ce1f09afa010857b95d4aed25868287878787604051611bad959493929190613670565b60405180910390a25050505050565b60076020528060005260406000206000915090505481565b6004600084815260200190815260200160002060050160009054906101000a900460ff16611c37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c2e90612f0f565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401611c94939291906136d8565b6020604051808303816000875af1158015611cb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd791906131f3565b611d16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0d9061326c565b60405180910390fd5b600060066000858152602001908152602001600020549050600660008581526020019081526020016000206000815480929190611d529061328c565b919050555060405180608001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018481526020016000151581526020018381525060056000868152602001908152602001600020600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019081611e119190613476565b5060408201518160020160006101000a81548160ff02191690831515021790555060608201518160030155905050600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190611e8f9061328c565b91905055503373ffffffffffffffffffffffffffffffffffffffff167fe17c01af799c5069ecf6fd9a231440a115adb7a1dea0306b06d8efe971a1a0b085838686604051611ee0949392919061370f565b60405180910390a250505050565b6000600354905090565b6000600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6004600082815260200190815260200160002060050160009054906101000a900460ff16611fa4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9b90612f0f565b60405180910390fd5b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002060009054906101000a900460ff1615612042576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612039906137cd565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd336004600086815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660046000878152602001908152602001600020600301546040518463ffffffff1660e01b81526004016120ee939291906136d8565b6020604051808303816000875af115801561210d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213191906131f3565b90508015612249576004600083815260200190815260200160002060030154600760008481526020019081526020016000206000828254612172919061316a565b925050819055506001600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f1442bdb26f7569db0cb308056cb26688f7aad42fc098b54920e1af1e8b67a5fc8360046000868152602001908152602001600020600301546040516122409291906137ed565b60405180910390a25b5050565b600b6020528060005260406000206000915090505481565b60086020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600a602052816000526040600020602052806000526040600020600091509150505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001600015158152602001600081525090565b828054828255906000526020600020908101928215612365579160200282015b828111156123645782518290816123549190613476565b509160200191906001019061233d565b5b5090506123729190612376565b5090565b5b80821115612396576000818161238d919061239a565b50600101612377565b5090565b5080546123a690612e92565b6000825580601f106123b857506123d7565b601f0160209004906000526020600020908101906123d691906123da565b5b50565b5b808211156123f35760008160009055506001016123db565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006124368261240b565b9050919050565b6124468161242b565b811461245157600080fd5b50565b6000813590506124638161243d565b92915050565b6000819050919050565b61247c81612469565b811461248757600080fd5b50565b60008135905061249981612473565b92915050565b600080604083850312156124b6576124b5612401565b5b60006124c485828601612454565b92505060206124d58582860161248a565b9150509250929050565b6124e881612469565b82525050565b600060208201905061250360008301846124df565b92915050565b600080604083850312156125205761251f612401565b5b600061252e8582860161248a565b925050602061253f8582860161248a565b9150509250929050565b6125528161242b565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612592578082015181840152602081019050612577565b60008484015250505050565b6000601f19601f8301169050919050565b60006125ba82612558565b6125c48185612563565b93506125d4818560208601612574565b6125dd8161259e565b840191505092915050565b60008115159050919050565b6125fd816125e8565b82525050565b61260c81612469565b82525050565b600060808301600083015161262a6000860182612549565b506020830151848203602086015261264282826125af565b915050604083015161265760408601826125f4565b50606083015161266a6060860182612603565b508091505092915050565b6000602082019050818103600083015261268f8184612612565b905092915050565b6000602082840312156126ad576126ac612401565b5b60006126bb8482850161248a565b91505092915050565b6126cd8161242b565b82525050565b600082825260208201905092915050565b60006126ef82612558565b6126f981856126d3565b9350612709818560208601612574565b6127128161259e565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061275583836125af565b905092915050565b6000602082019050919050565b60006127758261271d565b61277f8185612728565b93508360208202850161279185612739565b8060005b858110156127cd57848403895281516127ae8582612749565b94506127b98361275d565b925060208a01995050600181019050612795565b50829750879550505050505092915050565b600060c0820190506127f460008301896126c4565b818103602083015261280681886126e4565b9050818103604083015261281a81876126e4565b905061282960608301866124df565b818103608083015261283b818561276a565b905061284a60a08301846124df565b979650505050505050565b61285e816125e8565b82525050565b600060c08201905061287960008301896126c4565b818103602083015261288b81886126e4565b9050818103604083015261289f81876126e4565b90506128ae60608301866124df565b6128bb6080830185612855565b6128c860a08301846124df565b979650505050505050565b6000602082840312156128e9576128e8612401565b5b60006128f784828501612454565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006129388383612603565b60208301905092915050565b6000602082019050919050565b600061295c82612900565b612966818561290b565b93506129718361291c565b8060005b838110156129a2578151612989888261292c565b975061299483612944565b925050600181019050612975565b5085935050505092915050565b600060208201905081810360008301526129c98184612951565b905092915050565b60006080820190506129e660008301876126c4565b81810360208301526129f881866126e4565b9050612a076040830185612855565b612a1460608301846124df565b95945050505050565b6000602082019050612a326000830184612855565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612a7a8261259e565b810181811067ffffffffffffffff82111715612a9957612a98612a42565b5b80604052505050565b6000612aac6123f7565b9050612ab88282612a71565b919050565b600067ffffffffffffffff821115612ad857612ad7612a42565b5b612ae18261259e565b9050602081019050919050565b82818337600083830152505050565b6000612b10612b0b84612abd565b612aa2565b905082815260208101848484011115612b2c57612b2b612a3d565b5b612b37848285612aee565b509392505050565b600082601f830112612b5457612b53612a38565b5b8135612b64848260208601612afd565b91505092915050565b600067ffffffffffffffff821115612b8857612b87612a42565b5b602082029050602081019050919050565b600080fd5b6000612bb1612bac84612b6d565b612aa2565b90508083825260208201905060208402830185811115612bd457612bd3612b99565b5b835b81811015612c1b57803567ffffffffffffffff811115612bf957612bf8612a38565b5b808601612c068982612b3f565b85526020850194505050602081019050612bd6565b5050509392505050565b600082601f830112612c3a57612c39612a38565b5b8135612c4a848260208601612b9e565b91505092915050565b60008060008060808587031215612c6d57612c6c612401565b5b600085013567ffffffffffffffff811115612c8b57612c8a612406565b5b612c9787828801612b3f565b945050602085013567ffffffffffffffff811115612cb857612cb7612406565b5b612cc487828801612b3f565b9350506040612cd58782880161248a565b925050606085013567ffffffffffffffff811115612cf657612cf5612406565b5b612d0287828801612c25565b91505092959194509250565b600080600060608486031215612d2757612d26612401565b5b6000612d358682870161248a565b935050602084013567ffffffffffffffff811115612d5657612d55612406565b5b612d6286828701612b3f565b9250506040612d738682870161248a565b9150509250925092565b6000819050919050565b6000612da2612d9d612d988461240b565b612d7d565b61240b565b9050919050565b6000612db482612d87565b9050919050565b6000612dc682612da9565b9050919050565b612dd681612dbb565b82525050565b6000602082019050612df16000830184612dcd565b92915050565b7f496e646578206f7574206f6620626f756e647300000000000000000000000000600082015250565b6000612e2d6013836126d3565b9150612e3882612df7565b602082019050919050565b60006020820190508181036000830152612e5c81612e20565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612eaa57607f821691505b602082108103612ebd57612ebc612e63565b5b50919050565b7f506170657220646f6573206e6f74206578697374000000000000000000000000600082015250565b6000612ef96014836126d3565b9150612f0482612ec3565b602082019050919050565b60006020820190508181036000830152612f2881612eec565b9050919050565b7f4f6e6c792074686520617574686f722063616e20617070726f766520636f6e7460008201527f7269627574696f6e730000000000000000000000000000000000000000000000602082015250565b6000612f8b6029836126d3565b9150612f9682612f2f565b604082019050919050565b60006020820190508181036000830152612fba81612f7e565b9050919050565b7f496e76616c696420636f6e747269627574696f6e20696e646578000000000000600082015250565b6000612ff7601a836126d3565b915061300282612fc1565b602082019050919050565b6000602082019050818103600083015261302681612fea565b9050919050565b7f436f6e747269627574696f6e20616c726561647920617070726f766564000000600082015250565b6000613063601d836126d3565b915061306e8261302d565b602082019050919050565b6000602082019050818103600083015261309281613056565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006130d382612469565b91506130de83612469565b92508282026130ec81612469565b9150828204841483151761310357613102613099565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061314482612469565b915061314f83612469565b92508261315f5761315e61310a565b5b828204905092915050565b600061317582612469565b915061318083612469565b925082820190508082111561319857613197613099565b5b92915050565b60006040820190506131b360008301856126c4565b6131c060208301846124df565b9392505050565b6131d0816125e8565b81146131db57600080fd5b50565b6000815190506131ed816131c7565b92915050565b60006020828403121561320957613208612401565b5b6000613217848285016131de565b91505092915050565b7f546f6b656e207472616e73666572206661696c65640000000000000000000000600082015250565b60006132566015836126d3565b915061326182613220565b602082019050919050565b6000602082019050818103600083015261328581613249565b9050919050565b600061329782612469565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036132c9576132c8613099565b5b600182019050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026133367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826132f9565b61334086836132f9565b95508019841693508086168417925050509392505050565b600061337361336e61336984612469565b612d7d565b612469565b9050919050565b6000819050919050565b61338d83613358565b6133a16133998261337a565b848454613306565b825550505050565b600090565b6133b66133a9565b6133c1818484613384565b505050565b5b818110156133e5576133da6000826133ae565b6001810190506133c7565b5050565b601f82111561342a576133fb816132d4565b613404846132e9565b81016020851015613413578190505b61342761341f856132e9565b8301826133c6565b50505b505050565b600082821c905092915050565b600061344d6000198460080261342f565b1980831691505092915050565b6000613466838361343c565b9150826002028217905092915050565b61347f82612558565b67ffffffffffffffff81111561349857613497612a42565b5b6134a28254612e92565b6134ad8282856133e9565b600060209050601f8311600181146134e057600084156134ce578287015190505b6134d8858261345a565b865550613540565b601f1984166134ee866132d4565b60005b82811015613516578489015182556001820191506020850194506020810190506134f1565b86831015613533578489015161352f601f89168261343c565b8355505b6001600288020188555050505b505050505050565b600060808201905061355d60008301876124df565b61356a60208301866124df565b61357760408301856124df565b61358460608301846124df565b95945050505050565b6000815461359a81612e92565b6135a481866126d3565b945060018216600081146135bf57600181146135d557613608565b60ff198316865281151560200286019350613608565b6135de856132d4565b60005b83811015613600578154818901526001820191506020810190506135e1565b808801955050505b50505092915050565b600060408201905061362660008301856124df565b8181036020830152613638818461358d565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060a08201905061368560008301886124df565b818103602083015261369781876126e4565b905081810360408301526136ab81866126e4565b90506136ba60608301856124df565b81810360808301526136cc818461276a565b90509695505050505050565b60006060820190506136ed60008301866126c4565b6136fa60208301856126c4565b61370760408301846124df565b949350505050565b600060808201905061372460008301876124df565b61373160208301866124df565b818103604083015261374381856126e4565b905061375260608301846124df565b95945050505050565b7f5573657220616c7265616479206861732061636365737320746f20746869732060008201527f7061706572000000000000000000000000000000000000000000000000000000602082015250565b60006137b76025836126d3565b91506137c28261375b565b604082019050919050565b600060208201905081810360008301526137e6816137aa565b9050919050565b600060408201905061380260008301856124df565b61380f60208301846124df565b939250505056fea2646970667358221220640aaac3183a14a951610abb53c0c4b8628eea7a3fd2c20939cc96fd25066d9364736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 791,
        "contract": "contracts/MedicalResearch.sol:MedicalResearch",
        "label": "token",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ERC20)651"
      },
      {
        "astId": 818,
        "contract": "contracts/MedicalResearch.sol:MedicalResearch",
        "label": "nextPaperId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 820,
        "contract": "contracts/MedicalResearch.sol:MedicalResearch",
        "label": "nextContributionIndex",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 822,
        "contract": "contracts/MedicalResearch.sol:MedicalResearch",
        "label": "totalPaperCount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 827,
        "contract": "contracts/MedicalResearch.sol:MedicalResearch",
        "label": "papers",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Paper)807_storage)"
      },
      {
        "astId": 834,
        "contract": "contracts/MedicalResearch.sol:MedicalResearch",
        "label": "contributions",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Contribution)816_storage))"
      },
      {
        "astId": 838,
        "contract": "contracts/MedicalResearch.sol:MedicalResearch",
        "label": "paperContributionCount",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 842,
        "contract": "contracts/MedicalResearch.sol:MedicalResearch",
        "label": "paperAccessFees",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 848,
        "contract": "contracts/MedicalResearch.sol:MedicalResearch",
        "label": "paperAccessed",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 852,
        "contract": "contracts/MedicalResearch.sol:MedicalResearch",
        "label": "userContributionCount",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 858,
        "contract": "contracts/MedicalResearch.sol:MedicalResearch",
        "label": "ownerPapers",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 862,
        "contract": "contracts/MedicalResearch.sol:MedicalResearch",
        "label": "ownerPaperCount",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ERC20)651": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Contribution)816_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct MedicalResearch.Contribution))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Contribution)816_storage)"
      },
      "t_mapping(t_uint256,t_struct(Contribution)816_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MedicalResearch.Contribution)",
        "numberOfBytes": "32",
        "value": "t_struct(Contribution)816_storage"
      },
      "t_mapping(t_uint256,t_struct(Paper)807_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MedicalResearch.Paper)",
        "numberOfBytes": "32",
        "value": "t_struct(Paper)807_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Contribution)816_storage": {
        "encoding": "inplace",
        "label": "struct MedicalResearch.Contribution",
        "members": [
          {
            "astId": 809,
            "contract": "contracts/MedicalResearch.sol:MedicalResearch",
            "label": "contributor",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 811,
            "contract": "contracts/MedicalResearch.sol:MedicalResearch",
            "label": "changesHash",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 813,
            "contract": "contracts/MedicalResearch.sol:MedicalResearch",
            "label": "approved",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 815,
            "contract": "contracts/MedicalResearch.sol:MedicalResearch",
            "label": "stakeAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Paper)807_storage": {
        "encoding": "inplace",
        "label": "struct MedicalResearch.Paper",
        "members": [
          {
            "astId": 793,
            "contract": "contracts/MedicalResearch.sol:MedicalResearch",
            "label": "author",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 795,
            "contract": "contracts/MedicalResearch.sol:MedicalResearch",
            "label": "title",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 797,
            "contract": "contracts/MedicalResearch.sol:MedicalResearch",
            "label": "contentHash",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 799,
            "contract": "contracts/MedicalResearch.sol:MedicalResearch",
            "label": "accessFee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 802,
            "contract": "contracts/MedicalResearch.sol:MedicalResearch",
            "label": "keywords",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 804,
            "contract": "contracts/MedicalResearch.sol:MedicalResearch",
            "label": "exists",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 806,
            "contract": "contracts/MedicalResearch.sol:MedicalResearch",
            "label": "parentPaperId",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}